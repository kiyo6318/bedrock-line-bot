service: amazon-bedrock-bot-kiyo

# deployするのは、handler.js ファイルのみ
package:
  exclude:
    - node_modules/**
    - my-layer/**
    - .gitignore
    - .git/**
    - package-lock.json
    - package.json
    - README.md
    - event.json

provider:
  name: aws
  runtime: nodejs20.x
  profile: default
  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}
  environment:
    CHANNEL_ACCESS_TOKEN: "hoge"
    CHANNEL_SECRET: "fuga"
    OPENAI_API_KEY: "YOUR OPENAI API KEY"
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-conversations
    S3_BUCKET: ${self:service}-${self:provider.stage}-bucket
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "bedrock:InvokeModel"
        - "bedrock:ListFoundationModels"
      Resource: "arn:aws:bedrock:*:*:foundation-model/*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:ListBucket
        - s3:ListBucketMultipartUploads
        - s3:ListMultipartUploadParts
      Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"

functions:
  bot:
    handler: handler.callback
    layers:
      - arn:aws:lambda:ap-northeast-1:388539596430:layer:line-bot-nodejs:1
    events:
      - http:
          path: callback
          method: post
          cors: true
          async: true
    timeout: 180
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true

resources:
  Resources:
    ConversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
